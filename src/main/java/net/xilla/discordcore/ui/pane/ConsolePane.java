package net.xilla.discordcore.ui.pane;

import lombok.Getter;
import net.xilla.discordcore.DiscordCore;
import net.xilla.discordcore.core.command.CommandData;
import net.xilla.discordcore.core.command.CommandManager;
import net.xilla.discordcore.core.command.handler.ConsoleUser;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ConsolePane implements Pane {

    @Getter
    private JTextArea consoleOutput;

    @Getter
    private JPanel panel;

    @Getter
    private JScrollPane outputScroller;

    @Getter
    private JTextField consoleInput;

    private String lastCommand = "";

    private int commandID = 0;

    public ConsolePane() {
        consoleInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                String message = consoleInput.getText();

                ranCommand(message);

                CommandManager manager = DiscordCore.getInstance().getCommandManager();
                if (manager != null) {
                    manager.runRawCommandInput(consoleInput.getText(), CommandData.command_line_input, new ConsoleUser());
                }
                consoleInput.setText("");
            }
        });
    }

    public void iterateConsole(String s) {
        consoleOutput.append("\n" + s);
        consoleOutput.setCaretPosition(consoleOutput.getDocument().getLength());
    }

    public String waitOnNextCommand() {
        int lastCommandID = commandID;

        System.out.println("Waiting on next command");

        while (lastCommandID == commandID) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ignored) {
            }
        }

        System.out.println("Got next command " + this.lastCommand);

        return this.lastCommand;
    }

    private void ranCommand(String command) {
        this.lastCommand = command;
        this.commandID++;
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        outputScroller = new JScrollPane();
        panel.add(outputScroller, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(640, 430), new Dimension(640, 430), null, 0, false));
        consoleOutput = new JTextArea();
        consoleOutput.setEditable(false);
        consoleOutput.setLineWrap(true);
        outputScroller.setViewportView(consoleOutput);
        consoleInput = new JTextField();
        panel.add(consoleInput, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, new Dimension(640, 50), new Dimension(640, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
